0 - Import the ``BaseGeometry`` class

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

1 - Create an instance of BaseGeometry successfully

    >>> bg = BaseGeometry()

2 - Raise an exception when calling the area() method

    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

3 - Raise an exception if integer_validator() is called with missing arguments

    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

4 - Raise an exception if integer_validator() is called with excessive arguments

    >>> bg = BaseGeometry()
    >>> bg.integer_validator(1, 1, 1)
    Traceback (most recent call last):
        ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

5 - Raise a TypeError exception when integer_validator() is called with a string value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Integer", "Five")
    Traceback (most recent call last):
        ...
    TypeError: Integer must be an integer

6 - Raise a TypeError exception when integer_validator() is called with None as the value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Integer", None)
    Traceback (most recent call last):
        ...
    TypeError: Integer must be an integer

7 - Raise a TypeError exception when integer_validator() is called with a boolean value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Integer", True)
    Traceback (most recent call last):
        ...
    TypeError: Integer must be an integer

8 - Raise a TypeError exception when integer_validator() is called with a list value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("List", [1, 3])
    Traceback (most recent call last):
        ...
    TypeError: List must be an integer

9 - Raise a TypeError exception when integer_validator() is called with a tuple value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Tuple", (1, 2))
    Traceback (most recent call last):
        ...
    TypeError: Tuple must be an integer

10 - Raise a TypeError exception when integer_validator() is called with a dictionary value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Dictionary", {"key": 1})
    Traceback (most recent call last):
        ...
    TypeError: Dictionary must be an integer

11 - Raise a TypeError exception when integer_validator() is called with a float value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Float", 5.0)
    Traceback (most recent call last):
        ...
    TypeError: Float must be an integer

12 - Raise a ValueError exception when integer_validator() is called with a negative value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Negative", -1)
    Traceback (most recent call last):
        ...
    ValueError: Negative must be greater than 0

13 - Raise a ValueError exception when integer_validator() is called with a value equal to 0

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Zero", 0)
    Traceback (most recent call last):
        ...
    ValueError: Zero must be greater than 0

14 - Return nothing when integer_validator() is called with proper arguments

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Integer", 5)

15 - Raise a TypeError exception when integer_validator() is called with a float value

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Float", 5.5)
    Traceback (most recent call last):
        ...
    TypeError: Float must be an integer


>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> try:
...    bg.integer_validator("name", "John")
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
...    bg.integer_validator("age", 0)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...    bg.integer_validator("distance", -4)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0